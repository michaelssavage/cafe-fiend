/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedPostsRouteImport } from './routes/_authed/posts'
import { Route as AuthedPostsSlugRouteImport } from './routes/_authed/posts.$slug'

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedPostsRoute = AuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPostsSlugRoute = AuthedPostsSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => AuthedPostsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof AuthedPostsRouteWithChildren
  '/posts/$slug': typeof AuthedPostsSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts': typeof AuthedPostsRouteWithChildren
  '/posts/$slug': typeof AuthedPostsSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/posts': typeof AuthedPostsRouteWithChildren
  '/_authed/posts/$slug': typeof AuthedPostsSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/posts' | '/posts/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/posts' | '/posts/$slug'
  id: '__root__' | '/' | '/_authed' | '/_authed/posts' | '/_authed/posts/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/posts/$slug': {
      id: '/_authed/posts/$slug'
      path: '/$slug'
      fullPath: '/posts/$slug'
      preLoaderRoute: typeof AuthedPostsSlugRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
  }
}

interface AuthedPostsRouteChildren {
  AuthedPostsSlugRoute: typeof AuthedPostsSlugRoute
}

const AuthedPostsRouteChildren: AuthedPostsRouteChildren = {
  AuthedPostsSlugRoute: AuthedPostsSlugRoute,
}

const AuthedPostsRouteWithChildren = AuthedPostsRoute._addFileChildren(
  AuthedPostsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedPostsRoute: typeof AuthedPostsRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRoute: AuthedPostsRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
